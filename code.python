# K-Nearest Neighbors (KNN) Classification Implementation
# Demonstrates loading data, preprocessing, model training, evaluation, and visualization

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from matplotlib.colors import ListedColormap

# Set random seed for reproducibility
np.random.seed(42)

def main():
    # 1. Load and explore the dataset
    print("Loading iris dataset...")
    iris = load_iris()
    X = iris.data[:, :2]  # Using only first two features for easier visualization
    y = iris.target
    
    # Create DataFrame for visualization
    df = pd.DataFrame(X, columns=['Sepal Length', 'Sepal Width'])
    df['Species'] = y
    
    print("\nSample data:")
    print(df.head())
    
    # 2. Split data into training and test sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
    
    # 3. Feature normalization
    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)
    
    # 4. Train KNN classifier and evaluate for different k values
    k_values = range(1, 26)
    accuracies = []
    
    print("\nEvaluating different K values...")
    for k in k_values:
        knn = KNeighborsClassifier(n_neighbors=k)
        knn.fit(X_train, y_train)
        pred = knn.predict(X_test)
        accuracy = accuracy_score(y_test, pred)
        accuracies.append(accuracy)
        
    # Plot accuracy vs K values
    plt.figure(figsize=(10, 6))
    plt.plot(k_values, accuracies, marker='o')
    plt.title('Accuracy vs K Value')
    plt.xlabel('Number of Neighbors (K)')
    plt.ylabel('Accuracy')
    plt.grid()
    plt.show()
    
    # Select best K based on accuracy
    best_k = k_values[np.argmax(accuracies)]
    print(f"\nBest K value: {best_k} with accuracy {max(accuracies):.2f}")
    
    # 5. Train model with best K and evaluate
    print("\nTraining final model with best K...")
    knn = KNeighborsClassifier(n_neighbors=best_k)
    knn.fit(X_train, y_train)
    y_pred = knn.predict(X_test)
    
    print("\nClassification Report:")
    print(classification_report(y_test, y_pred))
    
    print("\nConfusion Matrix:")
    print(confusion_matrix(y_test, y_pred))
    
    # 6. Visualize decision boundaries
    print("\nPlotting decision boundaries...")
    plot_decision_boundaries(X_train, y_train, knn)
    
    plt.show()

def plot_decision_boundaries(X, y, model, step=0.01):
    """
    Visualize the decision boundaries for KNN classifier
    """
    # Create color maps
    cmap_light = ListedColormap(['#FFAAAA', '#AAFFAA', '#AAAAFF'])
    cmap_bold = ListedColormap(['#FF0000', '#00FF00', '#0000FF'])
    
    # Create mesh grid
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, step),
                         np.arange(y_min, y_max, step))
    
    # Predict for each point in mesh grid
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)
    
    # Plot decision boundaries
    plt.figure(figsize=(10, 6))
    plt.pcolormesh(xx, yy, Z, cmap=cmap_light)
    
    # Plot training points
    plt.scatter(X[:, 0], X[:, 1], c=y, cmap=cmap_bold,
                edgecolor='k', s=20)
    plt.xlim(xx.min(), xx.max())
    plt.ylim(yy.min(), yy.max())
    plt.title(f"KNN (k={model.n_neighbors}) decision boundaries")
    plt.xlabel('Sepal Length (standardized)')
    plt.ylabel('Sepal Width (standardized)')

if __name__ == "__main__":
    main()
